import javax.swing.*;
import java.awt.Rectangle;
import java.awt.event.*;

/**
 * SettingsEditor.java
 * @author  David Neistadt
 */
public class SettingsEditor extends ProxyFilterSettings {
    //instance variables
    ContentExtractor mFilter;
    
    //final variables
    private final String TAB_NAME = "Extractor Settings";
    
    /** Creates new form SettingsEditor
     * @param iFilter the ContentExtractor to change the settings of.
     */
    public SettingsEditor(ContentExtractor iFilter) {
        initComponents();
        mFilter = iFilter;
        loadSettings();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupOutput = new javax.swing.ButtonGroup();
        settingsTabs = new javax.swing.JTabbedPane();
        ignorePanel = new javax.swing.JPanel();
        ignoreAdsCheck = new javax.swing.JCheckBox();
        ignoreScriptsCheck = new javax.swing.JCheckBox();
        ignoreNoscriptCheck = new javax.swing.JCheckBox();
        ignoreStylesCheck = new javax.swing.JCheckBox();
        ignoreStyleInDivCheck = new javax.swing.JCheckBox();
        ignoreImagesCheck = new javax.swing.JCheckBox();
        ignoreTextLinksCheck = new javax.swing.JCheckBox();
        ignoreImageLinksCheck = new javax.swing.JCheckBox();
        ignoreFormsCheck = new javax.swing.JCheckBox();
        ignoreMetaCheck = new javax.swing.JCheckBox();
        ignoreInputCheck = new javax.swing.JCheckBox();
        ignoreButtonCheck = new javax.swing.JCheckBox();
        ignoreSelectCheck = new javax.swing.JCheckBox();
        ignoreTableCellWidthsCheck = new javax.swing.JCheckBox();
        ignoreIframeCheck = new javax.swing.JCheckBox();
        displayAltTagsCheck = new javax.swing.JCheckBox();
        displayImageLinkAltsCheck = new javax.swing.JCheckBox();
        ignoreEmbedCheck = new javax.swing.JCheckBox();
        advancedPanel = new javax.swing.JPanel();
        advancedLayoutPanel = new javax.swing.JPanel();
        ignoreLinkListsCheck = new javax.swing.JCheckBox();
        ignoreLLTextLinksCheck = new javax.swing.JCheckBox();
        ignoreOnlyTextAndLinksCheck = new javax.swing.JCheckBox();
        linkTextRatioLabel = new javax.swing.JLabel();
        linkTextRatio = new javax.swing.JTextField();
        ignoreLLImageLinksCheck = new javax.swing.JCheckBox();
        removeEmptyTablesCheck = new javax.swing.JCheckBox();
        substanceLabel = new javax.swing.JLabel();
        substanceImageCheck = new javax.swing.JCheckBox();
        substanceLinksCheck = new javax.swing.JCheckBox();
        substanceInputCheck = new javax.swing.JCheckBox();
        substanceSelectCheck = new javax.swing.JCheckBox();
        minimumTextLengthLabel = new javax.swing.JLabel();
        minimumTextLengthField = new javax.swing.JTextField();
        substanceIFrameCheck = new javax.swing.JCheckBox();
        substanceFormCheck = new javax.swing.JCheckBox();
        substanceButtonCheck = new javax.swing.JCheckBox();
        substanceTextareaCheck = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        outputPanel = new javax.swing.JPanel();
        outputFormatPanel = new javax.swing.JPanel();
        htmlOutputButton = new javax.swing.JRadioButton();
        textOutputButton = new javax.swing.JRadioButton();
        htmlOutputPanel = new javax.swing.JPanel();
        appendLinksCheck = new javax.swing.JCheckBox();
        textOutputPanel = new javax.swing.JPanel();
        limitLineBreaksCheck = new javax.swing.JCheckBox();
        maxLineBreaksLabel = new javax.swing.JLabel();
        maxLineBreaksField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        setMaximumSize(new java.awt.Dimension(445, 392));
        settingsTabs.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        ignorePanel.setLayout(new java.awt.GridBagLayout());

        ignoreAdsCheck.setText("Ignore All Advertisements");
        ignoreAdsCheck.setAlignmentY(0.0F);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreAdsCheck, gridBagConstraints);

        ignoreScriptsCheck.setText("Ignore Scripts");
        ignoreScriptsCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreScriptsCheck, gridBagConstraints);

        ignoreNoscriptCheck.setText("Enable <NOSCIPT> tags");
        ignoreNoscriptCheck.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 11;
        ignorePanel.add(ignoreNoscriptCheck, gridBagConstraints);

        ignoreStylesCheck.setText("Ignore Styles");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreStylesCheck, gridBagConstraints);

        ignoreStyleInDivCheck.setText("Ignore Style Attribute in <DIV> tags");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreStyleInDivCheck, gridBagConstraints);

        ignoreImagesCheck.setText("Ignore Non-Link Images");
        ignoreImagesCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreImagesCheck, gridBagConstraints);

        ignoreTextLinksCheck.setText("Ignore Text Links");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreTextLinksCheck, gridBagConstraints);

        ignoreImageLinksCheck.setText("Ignore Image Links");
        ignoreImageLinksCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreImageLinksCheck, gridBagConstraints);

        ignoreFormsCheck.setText("Ignore Forms");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreFormsCheck, gridBagConstraints);

        ignoreMetaCheck.setText("Ignore <META> tags");
        ignoreMetaCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreMetaCheckActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreMetaCheck, gridBagConstraints);

        ignoreInputCheck.setText("Ignore <INPUT> tags");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreInputCheck, gridBagConstraints);

        ignoreButtonCheck.setText("Ignore <BUTTON> tags");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreButtonCheck, gridBagConstraints);

        ignoreSelectCheck.setText("Ignore <SELECT> tags");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreSelectCheck, gridBagConstraints);

        ignoreTableCellWidthsCheck.setText("Ignore Table Cell Widths");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreTableCellWidthsCheck, gridBagConstraints);

        ignoreIframeCheck.setText("Ignore <IFRAME> tags");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreIframeCheck, gridBagConstraints);

        displayAltTagsCheck.setText("Display ALT Links");
        displayAltTagsCheck.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        ignorePanel.add(displayAltTagsCheck, gridBagConstraints);

        displayImageLinkAltsCheck.setText("Display ALT Links");
        displayImageLinkAltsCheck.setEnabled(false);
        displayImageLinkAltsCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        ignorePanel.add(displayImageLinkAltsCheck, gridBagConstraints);

        ignoreEmbedCheck.setText("Ignore <EMBED> tags");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ignorePanel.add(ignoreEmbedCheck, gridBagConstraints);

        settingsTabs.addTab("Ignore Settings", ignorePanel);

        advancedLayoutPanel.setLayout(new java.awt.GridBagLayout());

        ignoreLinkListsCheck.setText("Ignore Link Lists");
        ignoreLinkListsCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedLayoutPanel.add(ignoreLinkListsCheck, gridBagConstraints);

        ignoreLLTextLinksCheck.setText("Text Links");
        ignoreLLTextLinksCheck.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(ignoreLLTextLinksCheck, gridBagConstraints);

        ignoreOnlyTextAndLinksCheck.setText("Ignore Only Text and Links");
        ignoreOnlyTextAndLinksCheck.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(ignoreOnlyTextAndLinksCheck, gridBagConstraints);

        linkTextRatioLabel.setText("Link/Text Removal Ratio");
        linkTextRatioLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        advancedLayoutPanel.add(linkTextRatioLabel, gridBagConstraints);

        linkTextRatio.setText("0.25");
        linkTextRatio.setPreferredSize(new java.awt.Dimension(55, 20));
        linkTextRatio.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        advancedLayoutPanel.add(linkTextRatio, gridBagConstraints);

        ignoreLLImageLinksCheck.setText("Image Links");
        ignoreLLImageLinksCheck.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(ignoreLLImageLinksCheck, gridBagConstraints);

        removeEmptyTablesCheck.setText("Remove Empty Tables");
        removeEmptyTablesCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        advancedLayoutPanel.add(removeEmptyTablesCheck, gridBagConstraints);

        substanceLabel.setText("Tags to Consider as Substance:");
        substanceLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(substanceLabel, gridBagConstraints);

        substanceImageCheck.setText("<IMG>");
        substanceImageCheck.setEnabled(false);
        substanceImageCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(substanceImageCheck, gridBagConstraints);

        substanceLinksCheck.setText("<A>");
        substanceLinksCheck.setEnabled(false);
        substanceLinksCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(substanceLinksCheck, gridBagConstraints);

        substanceInputCheck.setText("<INPUT>");
        substanceInputCheck.setEnabled(false);
        substanceInputCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(substanceInputCheck, gridBagConstraints);

        substanceSelectCheck.setText("<SELECT>");
        substanceSelectCheck.setEnabled(false);
        substanceSelectCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        advancedLayoutPanel.add(substanceSelectCheck, gridBagConstraints);

        minimumTextLengthLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        minimumTextLengthLabel.setText("Minimum Text Length");
        minimumTextLengthLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        advancedLayoutPanel.add(minimumTextLengthLabel, gridBagConstraints);

        minimumTextLengthField.setText("1");
        minimumTextLengthField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        advancedLayoutPanel.add(minimumTextLengthField, gridBagConstraints);

        substanceIFrameCheck.setText("<IFRAME>");
        substanceIFrameCheck.setEnabled(false);
        substanceIFrameCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        advancedLayoutPanel.add(substanceIFrameCheck, gridBagConstraints);

        substanceFormCheck.setText("<FORM>");
        substanceFormCheck.setEnabled(false);
        substanceFormCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        advancedLayoutPanel.add(substanceFormCheck, gridBagConstraints);

        substanceButtonCheck.setText("<BUTTON>");
        substanceButtonCheck.setEnabled(false);
        substanceButtonCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        advancedLayoutPanel.add(substanceButtonCheck, gridBagConstraints);

        substanceTextareaCheck.setText("<TEXTAREA>");
        substanceTextareaCheck.setEnabled(false);
        substanceTextareaCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        advancedLayoutPanel.add(substanceTextareaCheck, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 430;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        advancedLayoutPanel.add(jSeparator1, gridBagConstraints);

        advancedPanel.add(advancedLayoutPanel);

        settingsTabs.addTab("Advanced Settings", null, advancedPanel, "null");

        outputPanel.setLayout(new javax.swing.BoxLayout(outputPanel, javax.swing.BoxLayout.Y_AXIS));

        outputFormatPanel.setLayout(new javax.swing.BoxLayout(outputFormatPanel, javax.swing.BoxLayout.Y_AXIS));

        outputFormatPanel.setBorder(new javax.swing.border.TitledBorder("Output Format"));
        outputFormatPanel.setAlignmentX(0.0F);
        htmlOutputButton.setSelected(true);
        htmlOutputButton.setText("HTML only");
        buttonGroupOutput.add(htmlOutputButton);
        htmlOutputButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        htmlOutputButton.setMaximumSize(new java.awt.Dimension(10000, 24));
        outputFormatPanel.add(htmlOutputButton);

        textOutputButton.setText("Text only");
        buttonGroupOutput.add(textOutputButton);
        textOutputButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textOutputButton.setMaximumSize(new java.awt.Dimension(10000, 24));
        outputFormatPanel.add(textOutputButton);

        outputPanel.add(outputFormatPanel);

        htmlOutputPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        htmlOutputPanel.setBorder(new javax.swing.border.TitledBorder("HTML Output Settings"));
        htmlOutputPanel.setAlignmentX(0.0F);
        htmlOutputPanel.setMinimumSize(new java.awt.Dimension(100, 59));
        htmlOutputPanel.setPreferredSize(new java.awt.Dimension(100, 59));
        appendLinksCheck.setText("Append Links to Bottom of Page");
        htmlOutputPanel.add(appendLinksCheck);

        outputPanel.add(htmlOutputPanel);

        textOutputPanel.setLayout(null);

        textOutputPanel.setBorder(new javax.swing.border.TitledBorder("Text Output Settings"));
        textOutputPanel.setAlignmentX(0.0F);
        textOutputPanel.setPreferredSize(new java.awt.Dimension(0, 240));
        limitLineBreaksCheck.setText("Limit number of line breaks");
        limitLineBreaksCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectionEnabler(evt);
            }
        });

        textOutputPanel.add(limitLineBreaksCheck);
        limitLineBreaksCheck.setBounds(10, 25, 180, 24);

        maxLineBreaksLabel.setText("Maximum number of line breaks");
        textOutputPanel.add(maxLineBreaksLabel);
        maxLineBreaksLabel.setBounds(10, 50, 183, 16);

        maxLineBreaksField.setColumns(5);
        maxLineBreaksField.setText("2");
        textOutputPanel.add(maxLineBreaksField);
        maxLineBreaksField.setBounds(200, 50, 55, 20);

        outputPanel.add(textOutputPanel);

        settingsTabs.addTab("Output Settings", outputPanel);

        add(settingsTabs, java.awt.BorderLayout.WEST);

    }//GEN-END:initComponents
    
    private void ignoreMetaCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreMetaCheckActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_ignoreMetaCheckActionPerformed
    
    private void selectionEnabler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectionEnabler
        // Check out what is the source
        Object source = evt.getItemSelectable();
        
        if (source == ignoreScriptsCheck) {
            if (evt.getStateChange() == ItemEvent.DESELECTED)
                ignoreNoscriptCheck.setEnabled(false);
            else
                ignoreNoscriptCheck.setEnabled(true);
        }//if
        else if (source == ignoreLinkListsCheck) {
            if (evt.getStateChange() == ItemEvent.DESELECTED) {
                ignoreLLTextLinksCheck.setEnabled(false);
                ignoreLLImageLinksCheck.setEnabled(false);
                ignoreOnlyTextAndLinksCheck.setEnabled(false);
                linkTextRatio.setEnabled(false);
                linkTextRatioLabel.setEnabled(false);
            }//if
            else {
                ignoreLLTextLinksCheck.setEnabled(true);
                ignoreLLImageLinksCheck.setEnabled(true);
                ignoreOnlyTextAndLinksCheck.setEnabled(true);
                linkTextRatio.setEnabled(true);
                linkTextRatioLabel.setEnabled(true);
            }//else
        }//else if
        else if (source == ignoreImagesCheck) {
            if (evt.getStateChange() == ItemEvent.DESELECTED) {
                displayAltTagsCheck.setEnabled(false);
            }//if
            else {
                displayAltTagsCheck.setEnabled(true);
            }
        }
        else if (source == ignoreImageLinksCheck) {
            if (evt.getStateChange() == ItemEvent.DESELECTED)
                displayImageLinkAltsCheck.setEnabled(false);
            else
                displayImageLinkAltsCheck.setEnabled(true);
        }
        else if (source == removeEmptyTablesCheck) {
            if (evt.getStateChange() == ItemEvent.DESELECTED) {
                substanceImageCheck.setEnabled(false);
                substanceLinksCheck.setEnabled(false);
                substanceInputCheck.setEnabled(false);
                substanceSelectCheck.setEnabled(false);
                substanceTextareaCheck.setEnabled(false);
                substanceButtonCheck.setEnabled(false);
                substanceFormCheck.setEnabled(false);
                substanceIFrameCheck.setEnabled(false);
                substanceLabel.setEnabled(false);
                minimumTextLengthLabel.setEnabled(false);
                minimumTextLengthField.setEnabled(false);
            }//if
            else {
                substanceImageCheck.setEnabled(true);
                substanceLinksCheck.setEnabled(true);
                substanceInputCheck.setEnabled(true);
                substanceSelectCheck.setEnabled(true);
                substanceTextareaCheck.setEnabled(true);
                substanceButtonCheck.setEnabled(true);
                substanceFormCheck.setEnabled(true);
                substanceIFrameCheck.setEnabled(true);
                substanceLabel.setEnabled(true);
                minimumTextLengthLabel.setEnabled(true);
                minimumTextLengthField.setEnabled(true);
            }//else
        }//else if
        else if (source == limitLineBreaksCheck) {
            if (evt.getStateChange() == ItemEvent.DESELECTED) {
                maxLineBreaksLabel.setEnabled(false);
                maxLineBreaksField.setEnabled(false);
            }
            else {
                maxLineBreaksLabel.setEnabled(true);
                maxLineBreaksField.setEnabled(true);
            }//if
        }
    }//GEN-LAST:event_selectionEnabler
    
    /**
     * Reloads settings GUI
     * @param iFilter the ContentExtractor
     */
    public void reload(ContentExtractor iFilter) {
	mFilter = iFilter;
	loadSettings();
    }

    /**
     * Loads the settings from the ContentExtractor by using accessor methods
     */
    public void loadSettings() {
        //Use do click to run listeners and setSelected to just set things
        
        if (mFilter.getSetting(ContentExtractor.ONLY_TEXT).equals("true")) textOutputButton.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_ADS).equals("true")) ignoreAdsCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_BUTTON_TAGS).equals("true")) ignoreButtonCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_FORMS).equals("true")) ignoreFormsCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_IFRAME_TAGS).equals("true")) ignoreIframeCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_IMAGE_LINKS).equals("true")) ignoreImageLinksCheck.doClick();;
        if (mFilter.getSetting(ContentExtractor.DISPLAY_IMAGE_LINK_ALTS).equals("true")) displayImageLinkAltsCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_IMAGES).equals("true")) ignoreImagesCheck.doClick();
        if (mFilter.getSetting(ContentExtractor.IGNORE_INPUT_TAGS).equals("true")) ignoreInputCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_LINK_CELLS).equals("true")) ignoreLinkListsCheck.doClick();
        if (mFilter.getSetting(ContentExtractor.LC_IGNORE_IMAGE_LINKS).equals("true")) ignoreLLImageLinksCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.LC_IGNORE_TEXT_LINKS).equals("true")) ignoreLLTextLinksCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_META).equals("true")) ignoreMetaCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_SCRIPTS).equals("true")) ignoreScriptsCheck.doClick();
        if (mFilter.getSetting(ContentExtractor.IGNORE_NOSCRIPT_TAGS).equals("true")) ignoreNoscriptCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_SELECT_TAGS).equals("true")) ignoreSelectCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_DIV_STYLES).equals("true")) ignoreStyleInDivCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_STYLES).equals("true")) ignoreStylesCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_CELL_WIDTH).equals("true")) ignoreTableCellWidthsCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_TEXT_LINKS).equals("true")) ignoreTextLinksCheck.setSelected(true);
        linkTextRatio.setText(mFilter.getSetting(ContentExtractor.LINK_TEXT_REMOVAL_RATIO));
        if (mFilter.getSetting(ContentExtractor.DISPLAY_IMAGE_ALTS).equals("true")) displayAltTagsCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.LC_ONLY_LINKS_AND_TEXT).equals("true")) ignoreOnlyTextAndLinksCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.REMOVE_EMPTY_TABLES).equals("true")) removeEmptyTablesCheck.doClick();
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_BUTTON).equals("true")) substanceButtonCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_FORM).equals("true")) substanceFormCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_IFRAME).equals("true")) substanceIFrameCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_IMAGE).equals("true")) substanceImageCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_INPUT).equals("true")) substanceInputCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_LINKS).equals("true")) substanceLinksCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_SELECT).equals("true")) substanceSelectCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.SUBSTANCE_TEXTAREA).equals("true")) substanceTextareaCheck.setSelected(true);
        minimumTextLengthField.setText(mFilter.getSetting(ContentExtractor.SUBSTANCE_MIN_TEXT_LENGTH));
        if (mFilter.getSetting(ContentExtractor.ADD_LINKS_TO_BOTTOM).equals("true")) appendLinksCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.IGNORE_EMBED_TAGS).equals("true")) ignoreEmbedCheck.setSelected(true);
        if (mFilter.getSetting(ContentExtractor.LIMIT_LINEBREAKS).equals("true")) limitLineBreaksCheck.doClick();
        maxLineBreaksField.setText(mFilter.getSetting(ContentExtractor.MAX_LINEBREAKS));
    }
    
    /**
     * Commits the settings so that the ContentExtractor reflects the user's
     * specifications.
     */
    public void commitSettings() {
        mFilter.changeSetting(ContentExtractor.ONLY_TEXT, Boolean.toString(textOutputButton.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_ADS, Boolean.toString(ignoreAdsCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_BUTTON_TAGS, Boolean.toString(ignoreButtonCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_FORMS, Boolean.toString(ignoreFormsCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_IFRAME_TAGS, Boolean.toString(ignoreIframeCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_IMAGE_LINKS, Boolean.toString(ignoreImageLinksCheck.isSelected()));
        if (ignoreImageLinksCheck.isSelected())
            mFilter.changeSetting(ContentExtractor.DISPLAY_IMAGE_LINK_ALTS, Boolean.toString(displayImageLinkAltsCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_TEXT_LINKS, Boolean.toString(ignoreTextLinksCheck.isSelected()));
        
        if (ignoreImagesCheck.isSelected()) {
            mFilter.changeSetting(ContentExtractor.DISPLAY_IMAGE_ALTS, Boolean.toString(displayAltTagsCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.IGNORE_IMAGES, Boolean.toString(ignoreImagesCheck.isSelected()));
        }
        else
            mFilter.changeSetting(ContentExtractor.IGNORE_IMAGES, Boolean.toString(ignoreImagesCheck.isSelected()));
        
        mFilter.changeSetting(ContentExtractor.IGNORE_INPUT_TAGS, Boolean.toString(ignoreInputCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_LINK_CELLS, Boolean.toString(ignoreLinkListsCheck.isSelected()));
        
        if (ignoreLinkListsCheck.isSelected()) {
            mFilter.changeSetting(ContentExtractor.LC_IGNORE_IMAGE_LINKS, Boolean.toString(ignoreLLImageLinksCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.LC_IGNORE_TEXT_LINKS, Boolean.toString(ignoreLLTextLinksCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.LINK_TEXT_REMOVAL_RATIO, linkTextRatio.getText());
            mFilter.changeSetting(ContentExtractor.LC_ONLY_LINKS_AND_TEXT, Boolean.toString(ignoreOnlyTextAndLinksCheck.isSelected()));
        }
        
        mFilter.changeSetting(ContentExtractor.IGNORE_META, Boolean.toString(ignoreMetaCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_SCRIPTS, Boolean.toString(ignoreScriptsCheck.isSelected()));
        
        if (ignoreNoscriptCheck.isSelected())
            mFilter.changeSetting(ContentExtractor.IGNORE_NOSCRIPT_TAGS, Boolean.toString(ignoreNoscriptCheck.isSelected()));
        
        mFilter.changeSetting(ContentExtractor.IGNORE_SELECT_TAGS, Boolean.toString(ignoreSelectCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_DIV_STYLES, Boolean.toString(ignoreStyleInDivCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_STYLES, Boolean.toString(ignoreStylesCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.IGNORE_CELL_WIDTH, Boolean.toString(ignoreTableCellWidthsCheck.isSelected()));
        
        if (removeEmptyTablesCheck.isSelected()) {
            mFilter.changeSetting(ContentExtractor.REMOVE_EMPTY_TABLES, Boolean.toString(removeEmptyTablesCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_BUTTON, Boolean.toString(substanceButtonCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_FORM, Boolean.toString(substanceFormCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_IFRAME, Boolean.toString(substanceIFrameCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_IMAGE, Boolean.toString(substanceImageCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_INPUT, Boolean.toString(substanceInputCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_LINKS, Boolean.toString(substanceLinksCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_SELECT, Boolean.toString(substanceSelectCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_TEXTAREA, Boolean.toString(substanceTextareaCheck.isSelected()));
            mFilter.changeSetting(ContentExtractor.SUBSTANCE_MIN_TEXT_LENGTH, minimumTextLengthField.getText());
        }//if
        else
            mFilter.changeSetting(ContentExtractor.REMOVE_EMPTY_TABLES, Boolean.toString(removeEmptyTablesCheck.isSelected()));
        
        mFilter.changeSetting(ContentExtractor.IGNORE_EMBED_TAGS, Boolean.toString(ignoreEmbedCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.ADD_LINKS_TO_BOTTOM, Boolean.toString(appendLinksCheck.isSelected()));
        mFilter.changeSetting(ContentExtractor.LIMIT_LINEBREAKS, Boolean.toString(limitLineBreaksCheck.isSelected()));
        if (limitLineBreaksCheck.isSelected())
            mFilter.changeSetting(ContentExtractor.MAX_LINEBREAKS, maxLineBreaksField.getText());
        
        mFilter.saveSettings();
    }
    
    public String getTabName() {
        return TAB_NAME;
    }
    
    public void revertSettings() {
        this.removeAll();
        initComponents();
        loadSettings();
        revalidate();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ignoreLinkListsCheck;
    private javax.swing.JCheckBox substanceImageCheck;
    private javax.swing.JPanel advancedLayoutPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField maxLineBreaksField;
    private javax.swing.JCheckBox substanceInputCheck;
    private javax.swing.JCheckBox ignoreNoscriptCheck;
    private javax.swing.JLabel maxLineBreaksLabel;
    private javax.swing.JCheckBox substanceButtonCheck;
    private javax.swing.JLabel substanceLabel;
    private javax.swing.JRadioButton textOutputButton;
    private javax.swing.JCheckBox substanceLinksCheck;
    private javax.swing.JCheckBox substanceTextareaCheck;
    private javax.swing.JRadioButton htmlOutputButton;
    private javax.swing.JCheckBox substanceSelectCheck;
    private javax.swing.JCheckBox ignoreOnlyTextAndLinksCheck;
    private javax.swing.JTextField minimumTextLengthField;
    private javax.swing.JCheckBox ignoreImageLinksCheck;
    private javax.swing.JCheckBox ignoreLLImageLinksCheck;
    private javax.swing.JPanel htmlOutputPanel;
    private javax.swing.JCheckBox substanceIFrameCheck;
    private javax.swing.JLabel minimumTextLengthLabel;
    private javax.swing.JPanel ignorePanel;
    private javax.swing.JCheckBox ignoreScriptsCheck;
    private javax.swing.JCheckBox ignoreMetaCheck;
    private javax.swing.JCheckBox ignoreInputCheck;
    private javax.swing.JLabel linkTextRatioLabel;
    private javax.swing.ButtonGroup buttonGroupOutput;
    private javax.swing.JCheckBox ignoreTextLinksCheck;
    private javax.swing.JCheckBox ignoreLLTextLinksCheck;
    private javax.swing.JCheckBox limitLineBreaksCheck;
    private javax.swing.JCheckBox ignoreButtonCheck;
    private javax.swing.JTabbedPane settingsTabs;
    private javax.swing.JCheckBox ignoreImagesCheck;
    private javax.swing.JCheckBox ignoreSelectCheck;
    private javax.swing.JCheckBox removeEmptyTablesCheck;
    private javax.swing.JCheckBox displayImageLinkAltsCheck;
    private javax.swing.JCheckBox ignoreAdsCheck;
    private javax.swing.JCheckBox displayAltTagsCheck;
    private javax.swing.JCheckBox ignoreEmbedCheck;
    private javax.swing.JCheckBox ignoreTableCellWidthsCheck;
    private javax.swing.JCheckBox ignoreStyleInDivCheck;
    private javax.swing.JPanel textOutputPanel;
    private javax.swing.JCheckBox ignoreStylesCheck;
    private javax.swing.JCheckBox substanceFormCheck;
    private javax.swing.JCheckBox ignoreIframeCheck;
    private javax.swing.JPanel outputFormatPanel;
    private javax.swing.JCheckBox ignoreFormsCheck;
    private javax.swing.JCheckBox appendLinksCheck;
    private javax.swing.JTextField linkTextRatio;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JPanel advancedPanel;
    // End of variables declaration//GEN-END:variables
    
}
