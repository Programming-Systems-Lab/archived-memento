package aether.event;

import org.elvin.je4.Notification;
import org.elvin.je4.Subscription;

/**
 * Indicates that an Aether Resource has changed it's state.
 *
 * @author Buko O. (buko@concedere.net)
 * @version 0.1
 **/
public class Notice extends Event implements Attribute.Notice
{
	/**
	 * Construct a new Notice containing no data.
	 */
	public Notice()
	{
		super();

		setEventType(aether.event.EventType.Notice);
	}

	/**
	 * Construct a new Notice from an existing Elvin notification.
	 *
	 * @param notif Notification containing Notice data
	 * @throws EventException
	 *         if <code>notif</code> is invalid
	 */
	public Notice(Notification notif) throws EventException
	{
		super(notif);
	}

	/**
	 * Get the topic ID of this notice if it was broadcast on a topic.
	 *
	 * @return topic ID of this notice rather than emitted
	 */
	public String getTopicId()
	{
		return notification.getString(TopicId);
	}

	/**
	 * Set the topic ID of this notice if it was broadcast on atopic.
	 *
	 * @param topic topic that the notice will be broadcast on
	 */
	public void setTopicId(String topic)
	{
		notification.put(TopicId, topic);
	}

	/**
	 * Given the GUID of a component, return a subscription for anybody
	 * who wishes to monitor the component.
	 *
	 * @param guid guid of the component
	 * @return Subscription to monitor the component
	 */
	public static Subscription createSourceSubscription(String guid)
	{
		if (guid == null)
		{
			String msg = "guid can't be null";
			throw new IllegalArgumentException(msg);
		}

		// subscribe to events generated by the component which are notices!
		String expr = SourceId + " == \"" + guid + "\" && " +
				EventType + " == \"" + aether.event.EventType.Notice + "\"";
		return new Subscription(expr);
	}

	/**
	 * Create a subscription for watching notices that're published to a
	 * specific on the network.
	 *
	 * @param topic topic to publish events to
	 * @return Subscription necessary to subscribe the topic
	 */
	public static Subscription createTopicSubscription(String topic)
	{
		if (topic == null)
		{
			String msg = "topic can't be null";
			throw new IllegalArgumentException(msg);
		}

        // subscribe to notices published to the topic
        String expr = TopicId + " == \"" + topic + "\" && " +
				EventType + " == \"" + aether.event.EventType.Notice + "\"";
		return new Subscription(expr);
	}
}
