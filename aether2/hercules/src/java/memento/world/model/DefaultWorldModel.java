package memento.world.model;

import net.concedere.dundee.DefaultComponent;
import net.concedere.dundee.ComponentException;
import net.concedere.dundee.framework.Initializable;

import javax.swing.event.EventListenerList;
import java.util.*;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;

import aether.util.GuidFactory;
import aether.server.domain.Advertisement;
import aether.server.framework.Advertising;

/**
 * Default implementation of the WorldModel interface.
 *
 * @author Buko O. (buko@concedere.net)
 * @version 0.1
 **/
public class DefaultWorldModel extends DefaultComponent implements WorldModel
{
	/**
	 * GUID that identifies this world model
	 */
	protected String guid;

	/**
	 * List of current listeners on the model.
	 */
	protected EventListenerList listenerList = new EventListenerList();

	/**
	 * Map of all the objects in the world to their GUID.
	 */
	protected Map worldObjectMap = Collections.synchronizedMap(new HashMap());

	/**
	 * Advertisement to be generated by this world.
	 */
	protected Advertisement advertisement;

	/**
	 * EventListenerList used to manage event listeners.
	 */
	protected PropertyChangeSupport pcSupport = new PropertyChangeSupport(this);

	public String getGuid()
	{
		return guid;
	}

	public void setGuid(String guid)
	{
		this.guid = guid;
	}

	public Advertisement getAdvertisement()
	{
		return advertisement;
	}

	public void setAdvertisement(Advertisement adv)
	{
		Advertisement oldAdv = this.advertisement;
		this.advertisement = adv;

		pcSupport.firePropertyChange(
				Advertising.AdvertisementProperty, oldAdv, adv);
	}

	public WorldObject create(Class c, Map params)
	{
		if ((c == null) || (params == null))
		{
			String msg = "c and params can't be null";
			throw new IllegalArgumentException(msg);
		}

        WorldObject created = null;

        if (c == Sector.class)
		{
			created = new DefaultSector();
		} else if (c == Portal.class)
		{
			created = new DefaultPortal();
		} else if (c == Avatar.class)
		{
            String clientGuid = (String) params.get("clientGuid");
			Avatar ava = new DefaultAvatar();
			ava.setClientGuid(clientGuid);

			created = ava;
		}
		else if (c == LocatableWorldObject.class)
		{
            created = new DefaultLocatableWorldObject();
		} else
		{
			String msg = "model can't created objects of class " + c;
			throw new IllegalArgumentException(msg);
		}


		// create a guid and set the world model
		created.setGuid(GuidFactory.createId());
		created.setWorldModel(this);
        worldObjectMap.put(created.getGuid(), created);

		fireObjectCreated(created);

        return created;
	}

	public void enter(WorldObject wo)
	{
    	fireObjectEntered(wo);
	}

	public void exit(WorldObject wo)
	{
		fireObjectExited(wo);
	}

	public WorldObject retrieve(String guid)
	{
		if (guid == null)
		{
			String msg = "guid can't be null";
			throw new IllegalArgumentException(msg);
		}

        if (!worldObjectMap.containsKey(guid))
		{
			String msg = "no world object with guid exists";
			throw new NoSuchElementException(msg);
		}

		return (WorldObject) worldObjectMap.get(guid);
	}

	public void destroy(WorldObject wo)
	{
        if (wo == null)
		{
			String msg = "wo can't be null";
			throw new IllegalArgumentException(msg);
		}

        if (wo.getWorldModel() != this)
		{
			String msg = "WorldModel doesn't own this object";
			throw new IllegalArgumentException(msg);
		}

        worldObjectMap.remove(wo.getGuid());
        wo.destroy();
        wo.setWorldModel(null);
        fireObjectDestroyed(wo);
	}

	public void addWorldModelListener(WorldModelListener wml)
	{
        listenerList.add(WorldModelListener.class, wml);
	}

	public void removeWorldModelListener(WorldModelListener wml)
	{
		listenerList.remove(WorldModelListener.class, wml);
	}

	/**
	 * Fire the event indicating a WorldObject has just been created.
	 *
	 * @param wo WorldObject that was just created
	 */
	protected void fireObjectCreated(WorldObject wo)
	{
        if (wo == null)
		{
			String msg = "wo can't be null";
			throw new IllegalArgumentException(msg);
		}

        WorldModelEvent wme = new WorldModelEvent(this, wo);
        Object[] listeners = listenerList.getListenerList();

        for (int i = listeners.length - 2; i >= 0; i -= 2)
		{
            if (listeners[i] == WorldModelListener.class)
			{
                ((WorldModelListener) listeners[i + 1]).objectCreated(wme);
			}
		}
	}

	/**
	 * Fire an event indicating that an object has been destroyed.
	 *
	 * @param wo world object that was destroyed
	 */
    protected void fireObjectDestroyed(WorldObject wo)
	{
        if (wo == null)
		{
			String msg = "wo can't be null";
			throw new IllegalArgumentException(msg);
		}

        WorldModelEvent wme = new WorldModelEvent(this, wo);
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2)
		{
			((WorldModelListener) listeners[i]).objectDestroyed(wme);
		}
	}

	/**
	 * Fire an event indicating an object has entered the world.
	 *
	 * @param wo object that entered the world
	 */
	protected void fireObjectEntered(WorldObject wo)
	{
        if (wo == null)
		{
			String msg = "wo can't be null";
			throw new IllegalArgumentException(msg);
		}

        WorldModelEvent wme = new WorldModelEvent(this, wo);
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2)
		{
			((WorldModelListener) listeners[i]).objectEntered(wme);
		}
	}

	/**
	 * Fire an event indicating an object has exited the world.
	 *
	 * @param wo object that exited the world
	 */
	protected void fireObjectExited(WorldObject wo)
	{
        if (wo == null)
		{
			String msg = "wo can't be null";
			throw new IllegalArgumentException(msg);
		}

        WorldModelEvent wme = new WorldModelEvent(this, wo);
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2)
		{
			((WorldModelListener) listeners[i]).objectExited(wme);
		}
	}

	public void addPropertyChangeListener(PropertyChangeListener pcl)
	{
		pcSupport.addPropertyChangeListener(pcl);
	}

	public void addPropertyChangeListener(String name,
										  PropertyChangeListener pcl)
	{
		pcSupport.addPropertyChangeListener(name, pcl);
	}

	public void removePropertyChangeListener(PropertyChangeListener pcl)
	{
		pcSupport.removePropertyChangeListener(pcl);
	}

	public void removePropertyChangeListener(String name,
											 PropertyChangeListener pcl)
	{
		pcSupport.removePropertyChangeListener(name, pcl);
	}
}
