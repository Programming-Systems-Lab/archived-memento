package psl.memento.server.container.persistence;

import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import psl.memento.server.util.Uid;

/**
 * An ObjectStore stores a collection of persistent objects. All objects within
 * an ObjectStore are usually kept in RAM for performance reasons; occasionally
 * -- if an object is rarely used -- the ObjectStore will serialize it to disk.
 * 
 * @author Buko O. (buko@cs.columbia.edu)
 * @version 0.1
 */
public class ObjectStore implements Serializable
{
	private String name;
	private Map objectMap = Collections.synchronizedMap(new HashMap());

	/**
	 * Construct a new Objectstore with the given name.
	 * 
	 * @param name name of the object store. This will define its location
	 *             on the network
	 **/
	ObjectStore(String name)
	{
		this.name = name;
	}
	
	/**
	 * Get the name of this ObjectStore.
	 * 
	 * @return name of this object store
	 **/
	public String getName()
	{
		return name;
	}
	
	/**
	 * Construct a new instance of a PersistentObject represented by its class
	 * in the store. 
	 * 
	 * @param c Class of the PersistentObject type to construct
	 * @throws IllegalArgumentException
	 *         if <c>c</c> is <c>null</c> or not a PersistentObject type
	 * @throws PersistenceException
	 *         if creation fails
	 **/	
	public PersistentObject create(Class c) throws PersistenceException
	{
		// make sure not null
		if (c == null)
		{
			String msg = "c cannot be null";
			throw new IllegalArgumentException(msg);
		}
		
		// first make sure the class is a persistent object
		if (!PersistentObject.class.isAssignableFrom(c))
		{
			String msg = c.getName() + " is not a PersistentObject";
			throw new IllegalArgumentException(msg);
		}
		
		// now try to construct a new instance
		PersistentObject pobj = null;
		try
		{
			pobj = (PersistentObject) c.newInstance();
		}
		catch (Exception e)
		{
			String msg = "Couldn't construct new instance of " + c.getName();
			throw new PersistenceException(msg, e);
		}
		
		// construct a new uid for this object and place it in the map
		Uid id = new Uid();
		pobj.setPersistenceId(id);
		objectMap.put(id, pobj);
		
		// now return it
		return pobj;
	}
	
	/**
	 * Retrieve a PersistentObject from the object store by uid. 
	 * <p>
	 * Just because an object is successfully retrieved from the store <em>does
	 * not imply that it is safe to read or write to that object</em>. The 
	 * calling thread still must acquire the appropriate read or write locks
	 * on the object before making any changes to it.
	 * 
	 * @param uid Unique id of the persistent object generated by the object 
	 *            store
	 * @return PersistentObject with the given unique id or <c>null</c> if 
	 *         there's no such object
	 * @throws PersistenceException
	 *         if the retrieve operation fails
	 **/
	public PersistentObject retrieve(Uid uid) throws PersistenceException
	{
		if (uid == null)
		{
			String msg = "uid cannot be null";
			throw new IllegalArgumentException(msg);
		}			
		
		return (PersistentObject) objectMap.get(uid);
	}
	
	/**
	 * Update a PersistentObject in the store.
	 * 
	 * @param pobj PersistentObject to store in the map
	 * @throws PersistenceException
	 *         if the update operation fails
	 **/
	public void update(PersistentObject pobj) throws PersistenceException
	{
		if (pobj == null)
		{
			String msg = "pobj cannot be null";
			throw new IllegalArgumentException(msg);
		}
		
		// make sure this object exists
		if (!objectMap.containsKey(pobj.getPersistenceId()))
		{
			String msg = "no such PersistentObject exists!";
			throw new PersistenceException(msg);
		}
		
		// replace the one in the map
		objectMap.put(pobj.getPersistenceId(), pobj);
	}
	
	/**
	 * Delete an object from the ObjectStore.
	 * 
	 * @param uid persistence id of the persistent object to delete
	 * @throws PersistenceException
	 *         if the delete operation fails
	 **/	
	public void delete(Uid uid) throws PersistenceException
	{
		if (uid == null)
		{
			String msg = "uid cannot be null";
			throw new IllegalArgumentException(msg);
		}
		
		// remove it from the map
		objectMap.remove(uid);
	}	
}
